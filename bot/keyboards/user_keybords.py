from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from bot.database.models import Channel
from bot.database import requests as rq
from config import bot


main = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üî∞ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data='my_channels')]
    # [InlineKeyboardButton(text="‚öôÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞", callback_data='subscription')],
    # [InlineKeyboardButton(text="üí∞ –ö–æ—à–µ–ª–µ–∫", callback_data='wallet')]
    
] )  

create_chanel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_chanel'), InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
    
] )  

cancel = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='back_main')]
    
] )  

# –ë–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ 
async def create_channel_buttons(channels: list[Channel]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
        callback_data='add_chanel'
    )
    for channel in channels:
        builder.button(
            text=f'‚ñ∂Ô∏è {channel.name}',  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
            callback_data=f"setting_channel_{channel.id_channel}"  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data='back_main'
    )
    builder.adjust(1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return builder.as_markup()

# –ë–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def edit_channel_buttons(channel_id: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="‚ûï –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª",
        callback_data=f'delete_channel_{channel_id}'
    )
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
        callback_data='back_main'
    )
    builder.adjust(1)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    return builder.as_markup()

# –ë–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
async def channel_btn_to_send_post(user_id: str, message: Message) -> InlineKeyboardMarkup:
    """_summary_

    Args:
        user_id (str): _description_

    Returns:
        InlineKeyboardMarkup: _description_
    """
    builder = InlineKeyboardBuilder()
    channels = await rq.get_user_channel_new(user_id=user_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é defaul=True
    # filtered_channels = list(filter(lambda channel: getattr(channel, 'defaul', True), channels))
    list_chan =[]
    for chan in channels:
        var = await rq.check_bot_admin_channel(channel_id=chan.id_channel, bot=bot)
        if var:
            list_chan.append(chan)
    
    for channel in list_chan:
        builder.button(
            text=f'üì® {channel.name}',  # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –Ω–∞ –∫–Ω–æ–ø–∫–µ
            callback_data=f"send_{channel.id_channel}@mess_{message.message_id}",  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        )
    # builder.button(
    #         text=f'‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 
    #         callback_data=f"message_edit_{message.message_id}@chat_{message.chat.id}",  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    #     )
    builder.button(
            text=f'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', 
            callback_data=f"message_delete_{message.message_id}@chat_{message.chat.id}",  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        )
    builder.adjust(1)
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É –∫–ª–∞–≤–∏
    return builder.as_markup()
